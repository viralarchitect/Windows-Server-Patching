#Requires -Version 5.1
Add-Type -AssemblyName System.Windows.Forms, System.Drawing

#--- layout variables
$script:y = 10
$form = New-Object System.Windows.Forms.Form
$form.Text = "Patching Evidence Collector"
$form.Size = New-Object System.Drawing.Size(600,700)
$form.StartPosition = "CenterScreen"

$panel = New-Object System.Windows.Forms.Panel
$panel.Dock       = "Fill"
$panel.AutoScroll = $true
$form.Controls.Add($panel)

#--- helper functions to place controls
function Add-Label {
    param([string]$Text)
    $lbl = New-Object System.Windows.Forms.Label
    $lbl.Text     = $Text
    $lbl.AutoSize = $true
    $lbl.Location = New-Object System.Drawing.Point(10, $script:y)
    $panel.Controls.Add($lbl)
    $script:y   += $lbl.Height + 5
}
function Add-TextBox {
    param(
        [string]$Default,
        [bool]  $MultiLine,
        [int]   $Height
    )
    $tb = New-Object System.Windows.Forms.TextBox
    $tb.Multiline  = $MultiLine
    $tb.Width      = 550
    $tb.Height     = $Height
    $tb.Text       = $Default
    $tb.Location   = New-Object System.Drawing.Point(10, $script:y)
    $panel.Controls.Add($tb)
    $script:y     += $tb.Height + 10
    return $tb
}

#--- build the form
Add-Label "Account Name (default=$env:UserDomain)"
$txtAccount = Add-TextBox $env:UserDomain $false 20

Add-Label "Change Record Number (default=CGH000000)"
$txtChange  = Add-TextBox "CGH000000"       $false 20

Add-Label "Server List (one FQDN/IP per line)"
$txtServers = Add-TextBox ""                $true 100

Add-Label "2K16 KB List (one KBID per line, optional)"
$txtKB16    = Add-TextBox ""                $true 60

Add-Label "2K19 KB List (one KBID per line, optional)"
$txtKB19    = Add-TextBox ""                $true 60

Add-Label "2K22 KB List (one KBID per line, optional)"
$txtKB22    = Add-TextBox ""                $true 60

Add-Label "2K25 KB List (one KBID per line, optional)"
$txtKB25    = Add-TextBox ""                $true 60

$btnRun = New-Object System.Windows.Forms.Button
$btnRun.Text     = "Run"
$btnRun.Width    = 100
$btnRun.Height   = 30
$btnRun.Location = New-Object System.Drawing.Point(10, $script:y)
$panel.Controls.Add($btnRun)

#--- button logic
$btnRun.Add_Click({
    $Account    = $txtAccount.Text
    $ChangeNum  = $txtChange.Text
    $Servers    = $txtServers.Lines | Where-Object { $_.Trim() -ne "" }
    $kb16List   = $txtKB16   .Lines | Where-Object { $_.Trim() -ne "" }
    $kb19List   = $txtKB19   .Lines | Where-Object { $_.Trim() -ne "" }
    $kb22List   = $txtKB22   .Lines | Where-Object { $_.Trim() -ne "" }
    $kb25List   = $txtKB25   .Lines | Where-Object { $_.Trim() -ne "" }

    foreach ($srv in $Servers) {
        # 1) Ping
        $up = Test-Connection -ComputerName $srv -Count 1 -Quiet -ErrorAction SilentlyContinue
        if (-not $up) {
            [System.Windows.Forms.MessageBox]::Show(
                "$srv is offline.  Click OK to continue.",
                "Server Offline",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]   ::Warning
            )
        }

        # 2) System info
        try {
            $osObj   = Get-CimInstance -ClassName Win32_OperatingSystem -ComputerName $srv -ErrorAction Stop
            $osName  = $osObj.Caption
            $boot    = $osObj.LastBootUpTime.ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")
            $ipAddr  = (Get-CimInstance -ClassName Win32_NetworkAdapterConfiguration `
                        -Filter "IPEnabled=TRUE" -ComputerName $srv |
                        Select-Object -ExpandProperty IPAddress |
                        Where-Object { $_ -match '\d+\.\d+\.\d+\.\d+' })[0]
        } catch {
            [System.Windows.Forms.MessageBox]::Show(
                "Error retrieving OS info from $srv.`n$_",
                "Error",
                [System.Windows.Forms.MessageBoxButtons]::OK,
                [System.Windows.Forms.MessageBoxIcon]   ::Error
            )
            continue
        }
        $nowUTC     = (Get-Date).ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss")
        $hotfixes   = Get-CimInstance -ClassName Win32_QuickFixEngineering -ComputerName $srv |
                      Select-Object -ExpandProperty HotFixID
        $svcRun     = Get-Service -ComputerName $srv | Where Status -eq 'Running' | Select-Object -ExpandProperty Name
        $svcStop    = Get-Service -ComputerName $srv | Where Status -eq 'Stopped' | Select-Object -ExpandProperty Name
        $svcAutoOff = Get-CimInstance -ClassName Win32_Service -ComputerName $srv |
                      Where-Object { $_.State -eq 'Stopped' -and $_.StartMode -eq 'Auto' } |
                      Select-Object -ExpandProperty Name

        # 7) pick the right KB list
        switch -Wildcard ($osName) {
          "*2016*" { $list = $kb16List; $cat="2K16" }
          "*2019*" { $list = $kb19List; $cat="2K19" }
          "*2022*" { $list = $kb22List; $cat="2K22" }
          "*2025*" { $list = $kb25List; $cat="2K25" }
          default  { $list = @();      $cat=""      }
        }

        # 8) build PSObject with one row
        $row = [ordered]@{
            ChangeRecord       = $ChangeNum
            AccountName        = $Account
            Hostname           = $srv
            OS                 = $osName
            IPv4               = $ipAddr
            CurrentUTC         = $nowUTC
            LastBootUTC        = $boot
            InstalledKBs       = ($hotfixes -join ";")
            RunningServices    = ($svcRun    -join ";")
            StoppedServices    = ($svcStop   -join ";")
            StoppedAutoStart   = ($svcAutoOff-join ";")
        }

        # 9) add a column per provided KB
        foreach ($kb in $list) {
            $row["${cat}_$kb"] = if ($hotfixes -contains $kb) { "VALIDATED" } else { "" }
        }

        # 8b) export
        $dateTag = (Get-Date).ToString("yyyy-MM-dd")
        $file    = "{0}_{1}_{2}.csv" -f $ChangeNum, $srv, $dateTag
        $row | Export-Csv -Path $file -NoTypeInformation
    }
    [System.Windows.Forms.MessageBox]::Show(
      "Done â€“ CSV files are in your current folder.",
      "All Set",
      [System.Windows.Forms.MessageBoxButtons]::OK,
      [System.Windows.Forms.MessageBoxIcon]   ::Information
    )
})

# show it
[void]$form.ShowDialog()
